# TODO
# insert readiness checks
<%
def set_node_template_vars(values)
  @Eth_Etherbase         = values["geth"]["Eth_Etherbase"]
   @Node_UserIdent        = values["geth"]["Node_UserIdent"]
  @Node_DataDir          = values["geth"]["Node_DataDir"]
  @Node_HTTPPort         = values["geth"]["Node_HTTPPort"]
  @Node_WSPort           = values["geth"]["Node_WSPort"]
  @NodeP2P_ListenAddr    = values["geth"]["NodeP2P_ListenAddr"]
  @NodeP2P_DiscoveryAddr = values["geth"]["NodeP2P_DiscoveryAddr"]
  @Dashboard_Port        = values["geth"]["Dashboard_Port"]
  @Dashboard_Refresh     = values["geth"]["Dashboard_Refresh"]
  @nodePort_rpc          = values["k8s"]["nodePort_rpc"]
  @nodePort_ipc          = values["k8s"]["nodePort_ipc"]
  @replicas              = values["k8s"]["replicas"]
  return
end
-%>
<%- unless @config["keystore"]["secret"] -%>

# @Eth_MinerThreads      = values["geth"]["Eth_MinerThreads"]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keystore-config
  namespace: default
  labels:
    app: kuberneteth
    name: keystore-config
data:
  <%= @config["keystore"]["name"] %>: |-
<%- File.readlines("keystore/#{@config["keystore"]["name"]}").each do |line| -%>
    <%= line -%>
<% end -%>
<% end -%>
<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gethconfig-<%= @Node_UserIdent %>
  namespace: default
  labels:
    app: kuberneteth
    name: gethconfig-<%= @Node_UserIdent %>
data:
  gethconfig: |-
<%- File.readlines("#{@Node_UserIdent}.toml").each do |line| -%>
    <%= line -%>
<% end -%>
<% end %>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitor-config
  namespace: default
  labels:
    app: kuberneteth
    name: monitor-config
data:
  app.json: |-
    [
<%- @nodes.each_with_index do |node, index| -%>
<%= set_node_template_vars(node.values.first) -%>
      {
        "name"              : "<%= @Node_UserIdent %>",
        "cwd"               : ".",
        "script"            : "app.js",
        "log_date_format"   : "YYYY-MM-DD HH:mm Z",
        "merge_logs"        : false,
        "watch"             : false,
        "exec_interpreter"  : "node",
        "exec_mode"         : "fork_mode",
        "env":
        {
          "NODE_ENV"        : "production",
          "RPC_HOST"        : "<%= @Node_UserIdent %>-rpchost",
          "RPC_PORT"        : "<%= @Node_HTTPPort %>",
          "LISTENING_PORT"  : "<%= @NodeP2P_DiscoveryAddr %>",
          "INSTANCE_NAME"   : "<%= @Node_UserIdent %>",
          "CONTACT_DETAILS" : "",
          "WS_SERVER"       : "localhost:3001",
          "WS_SECRET"       : "connectme",
          "VERBOSITY"       : <%= @config["monitor"]["verbosity"] %>
        }
<%- if index == @nodes.length-1 -%>
      }
<% else -%>
      },
<% end -%>
<% end -%>
    ]

<%- unless @config["geth"]["network"]["public"] -%>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: genesis-config
  namespace: default
  labels:
    app: kuberneteth
    name: genesis-config
data:
  Genesis-geth.json: |-
    {
        "config": {
            "chainId": <%= @config["geth"]["network"]["id"] %>,
            "homesteadBlock": 0,
            "eip155Block": 0,
            "eip158Block": 0
        },
        "coinbase" : "0x0000000000000000000000000000000000000000",
        "difficulty" : "<%= @config["geth"]["difficulty"] %>",
        "extraData" : "0x",
        "gasLimit" : "0x47e7c5",
        "nonce" : "0x0000000000000042",
        "mixhash" : "0x0000000000000000000000000000000000000000000000000000000000000000",
        "parentHash" : "0x0000000000000000000000000000000000000000000000000000000000000000",
        "timestamp" : "0x00",
        "alloc" : {
        }
    }
<% end -%>

<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>
---
apiVersion: v1
kind: Service
metadata:
  name: <%= @Node_UserIdent %>-svc
  labels:
    app: kuberneteth
    tier: backend
    name: <%= @Node_UserIdent %>-svc
spec:
  selector:
    app: kuberneteth
    tier: backend
<%- if @nodePort_rpc || @nodePort_ipc -%>
  type: NodePort
<% end -%>
  ports:
    - name: <%= @Node_UserIdent %>-jsonrpc
      protocol: TCP
      port: <%= @Node_HTTPPort %>
      targetPort: <%= @Node_HTTPPort %>
<%- if @nodePort_rpc -%>
      nodePort: <%= @nodePort_rpc %>
<% end -%>
    - name: <%= @Node_UserIdent %>-wsrpc
      protocol: TCP
      port: <%= @Node_WSPort %>
      targetPort: <%= @Node_WSPort %>
    - name: <%= @Node_UserIdent %>-ipc-listen
      protocol: UDP
      port: <%= @NodeP2P_ListenAddr %>
      targetPort: <%= @NodeP2P_ListenAddr %>
    - name: <%= @Node_UserIdent %>-ipc-discovery
      protocol: TCP
      port: <%= @NodeP2P_DiscoveryAddr %>
      targetPort: <%= @NodeP2P_DiscoveryAddr %>
<%- if @nodePort_ipc -%>
      nodePort: <%= @nodePort_ipc %>
<% end -%>
<%- if @Dashboard_Port -%>
    - name: <%= @Node_UserIdent %>-dashboard
      protocol: TCP
      port: <%= @Dashboard_Port %>
      targetPort: <%= @Dashboard_Port %>
<% end -%>
<% end -%>

<%- unless @config["geth"]["network"]["public"] -%>
---
apiVersion: v1
kind: Service
metadata:
  name: geth-bootnode-svc
  labels:
    app: kuberneteth
    tier: backend
    name: geth-bootnode-svc
spec:
  selector:
    app: kuberneteth
    tier: backend
  ports:
    - name: geth-bootnode-ipc-discovery
      protocol: UDP
      port: <%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>
      targetPort: <%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: geth-boot-node-setup-pod
  labels:
    app: kuberneteth
    name: bootnode-setup-pod
spec:
  template:
    metadata:
      labels:
        app: kuberneteth
        name: bootnode-setup-pod
    spec:
      containers:
      - name: geth-boot-node-setup-container
        image: mmeister/geth-node:bootv2
        command: [ "sh" ]
        args:
        - "-cx"
        - "cd <%= @config["bootnode"]["geth"]["Node_DataDir"] %>;
           echo \"enode://$(/bootnode -nodekeyhex <%= @config["bootnode"]["nodekeyhex"] %> -writeaddress)@$GETH_BOOTNODE_SVC_SERVICE_HOST:<%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>\" > enode.address;
           set +x;
           while true; do :; done;"
        volumeMounts:
        - name: geth-boot-node-persistent-storage
          mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>
      volumes:
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
---
apiVersion: v1
kind: Pod
metadata:
  name: geth-boot-node-pod
  labels:
    app: kuberneteth
    name: geth-bootnode-pod
spec:
  containers:
  - name: geth-boot-node-container
    image: mmeister/geth-node:bootv2
    ports:
      - containerPort: <%= @config["bootnode"]["geth"]["NodeP2P_ListenAddr"] %>
      - containerPort: <%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>
        protocol: UDP
    command: [ "sh" ]
    args:
    - "-c"
    - "cd <%= @config["bootnode"]["geth"]["Node_DataDir"] %>;
       /geth --datadir <%= @config["bootnode"]["geth"]["Node_DataDir"] %> init /etc/geth/genesis/Genesis-geth.json;
       /bootnode --nodekeyhex <%= @config["bootnode"]["nodekeyhex"] %> --addr \":<%= @config["bootnode"]["geth"]["NodeP2P_DiscoveryAddr"] %>\" --nat any --netrestrict <%= @config["geth"]["NodeP2P_Netrestrict"] %> --verbosity <%= @config["bootnode"]["verbosity"] %>;"
    volumeMounts:
    - name: geth-boot-node-persistent-storage
      mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>
    - name: genesis-config-persistent-storage
      mountPath: /etc/geth/genesis/Genesis-geth.json
      subPath: Genesis-geth.json
    - name: keystore-config-persistent-storage
      mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>/keystore/<%= @config["keystore"]["name"] %>
      subPath: <%= @config["keystore"]["name"] %>
  volumes:
  - name: keystore-config-persistent-storage
<%- if @config["keystore"]["secret"] -%>
    secret:
      secretName: geth-key
<% else -%>
    configMap:
      name: keystore-config
      items:
      - key: <%= @config["keystore"]["name"] %>
        path: <%= @config["keystore"]["name"] %>
<% end -%>
  - name: geth-boot-node-persistent-storage
    hostPath:
      path: /var/lib/docker/geth-storage/bootnode
  - name: genesis-config-persistent-storage
    configMap:
      name: genesis-config
      items:
      - key: Genesis-geth.json
        path: Genesis-geth.json
<% end -%>

<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: geth-<%= @Node_UserIdent %>-deployment
spec:
  strategy:
    type: RollingUpdate
  replicas: <%= @replicas %>
  template:
    metadata:
      name: geth-<%= @Node_UserIdent %>-deployment
      labels:
        app: kuberneteth
        tier: backend
        name: <%= @Node_UserIdent %>-deployment
    spec:
      initContainers:
<%- unless @config["geth"]["network"]["public"] -%>
      - name: <%= @Node_UserIdent %>-genesis-init-container
        image: ethereum/client-go:<%= @config["geth"]["version"] %>
        command: [ "sh" ]
        args:
        - "-cx"
        - "if [ ! -f <%= @Node_DataDir %>/genesis_created ]; then
             /usr/local/bin/geth --datadir <%= @Node_DataDir %> init /etc/geth/genesis/Genesis-geth.json;
             touch <%= @Node_DataDir %>/genesis_created;
           fi;"
        volumeMounts:
        - name: <%= @Node_UserIdent %>-persistent-storage
          mountPath: <%= @Node_DataDir %>
        - name: geth-boot-node-persistent-storage
          mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>
        - name: genesis-config-persistent-storage
          mountPath: /etc/geth/genesis/Genesis-geth.json
          subPath: Genesis-geth.json
<% end -%>
      containers:
      - name: <%= @Node_UserIdent %>-container
        image: ethereum/client-go:<%= @config["geth"]["version"] %>
        command: [ "sh" ]
        args:
        - "-cx"
        - "mkdir -p /etc/geth/<%= @Node_UserIdent %>;
           cp /etc/gethconfigmap/<%= @Node_UserIdent %>/gethconfig.toml /etc/geth/<%= @Node_UserIdent %>;
<%- unless @config["geth"]["network"]["public"] -%>
           ENODE=$(cat <%= @config["bootnode"]["geth"]["Node_DataDir"] %>/enode.address);
           ENODE_ESC=$(echo $ENODE | sed 's@//@\\\\/\\\\/@g');
           sed -i \"s/BootstrapNodes = \\[\\]/BootstrapNodes = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/<%= @Node_UserIdent %>/gethconfig.toml;
           sed -i \"s/BootstrapNodesV5 = \\[\\]/BootstrapNodesV5 = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/<%= @Node_UserIdent %>/gethconfig.toml;
<% end -%>
           /usr/local/bin/geth \
<%- if @Dashboard_Port || @Dashboard_Refresh -%>
           --dashboard \
<% end -%>
<%- if @Eth_Etherbase && @Eth_MinerThreads -%>
           --mine \
<% end -%>
<%- unless @config["geth"]["network"]["public"] -%>
           --netrestrict <%= @config["geth"]["NodeP2P_Netrestrict"] %> \
<% end -%>
           --verbosity <%= @config["geth"]["verbosity"] %>  \
           --config /etc/geth/<%= @Node_UserIdent %>/gethconfig.toml;"
        ports:
          - containerPort: <%= @Node_HTTPPort %>
          - containerPort: <%= @Node_WSPort %>
          - containerPort: <%= @NodeP2P_ListenAddr %>
            protocol: UDP
          - containerPort: <%= @NodeP2P_DiscoveryAddr %>
<%- if @Dashboard_Port -%>
          - containerPort: <%= @Dashboard_Port %>
<% end -%>
        volumeMounts:
        - name: <%= @Node_UserIdent %>-persistent-storage
          mountPath: <%= @Node_DataDir %>
        - name: <%= @Node_UserIdent %>-config-persistent-storage
          mountPath: /etc/gethconfigmap/<%= @Node_UserIdent %>
        - name: keystore-config-persistent-storage
          mountPath: <%= @Node_DataDir %>/keystore/<%= @config["keystore"]["name"] %>
          subPath: <%= @config["keystore"]["name"] %>
<%- unless @config["geth"]["network"]["public"] -%>
        - name: geth-boot-node-persistent-storage
          mountPath: <%= @config["bootnode"]["geth"]["Node_DataDir"] %>
<% end -%>
      volumes:
      - name: keystore-config-persistent-storage
<%- if @config["keystore"]["secret"] -%>
        secret:
          secretName: geth-key
<% else -%>
        configMap:
          name: keystore-config
          items:
          - key: <%= @config["keystore"]["name"] %>
            path: <%= @config["keystore"]["name"] %>
<% end -%>
<%- unless @config["geth"]["network"]["public"] -%>
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
      - name: genesis-config-persistent-storage
        configMap:
          name: genesis-config
          items:
          - key: Genesis-geth.json
            path: Genesis-geth.json
<% end -%>
      - name: <%= @Node_UserIdent %>-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/<%= @Node_UserIdent %>
      - name: <%= @Node_UserIdent %>-config-persistent-storage
        configMap:
          name: gethconfig-<%= @Node_UserIdent %>
          items:
          - key: gethconfig
            path: gethconfig.toml
<% end -%>

---
apiVersion: v1
kind: Service
metadata:
  name: <%= @config["monitor"]["name"] %>-svc
  labels:
    app: kuberneteth
    tier: frontend
    name: <%= @config["monitor"]["name"] %>-svc
spec:
  selector:
    app: kuberneteth
    tier: frontend
<%- if @config["monitor"]["nodePort"] -%>
  type: NodePort
<% end -%>
  ports:
    - name: <%= @config["monitor"]["name"] %>-port
      protocol: TCP
      port: 3001
<%- if @config["monitor"]["nodePort"] -%>
      nodePort: <%= @config["monitor"]["nodePort"] %>
<% end -%>
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: <%= @config["monitor"]["name"] %>-deployment
spec:
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      name: <%= @config["monitor"]["name"] %>-deployment
      labels:
        app: kuberneteth
        tier: frontend
        name: <%= @config["monitor"]["name"] %>-deployment
    spec:
      initContainers:
      - name: <%= @config["monitor"]["name"] %>-init-container
        image: mmeister/eth-net-intelligence-api
        command: [ "sh" ]
        args:
        - "-cx"
        - "cp -r /eth-net-intelligence-api/* /ethmonitor;
           cp /monitor-configmap/app.json /ethmonitor/app.json;
<%- @nodes.each do |node| -%>
<%= set_node_template_vars(node.values.first) -%>
           sed -i \"s/<%= @Node_UserIdent %>-rpchost/$<%= @Node_UserIdent.upcase %>_SVC_SERVICE_HOST/g\" /ethmonitor/app.json;
<% end -%>
           exit 0;"
        volumeMounts:
        - name: monitor-configmap-volume
          mountPath: /monitor-configmap/app.json
          subPath: app.json
          # we need to mount an extra volume to be able to change a value in the configmap
        - name: monitor-config-persistent-storage
          mountPath: /ethmonitor
      containers:
      - name: eth-netstats-container
        image: mmeister/eth-netstats
        ports:
          - containerPort: 3001
        env:
        - name: WS_SECRET
          value: "connectme"
        - name: PORT
          value: "3001"
      - name: eth-net-intelligence-api-container
        image: mmeister/eth-net-intelligence-api
        volumeMounts:
        - name: monitor-config-persistent-storage
          mountPath: /eth-net-intelligence-api/app.json
          subPath: app.json
      volumes:
      - name: monitor-configmap-volume
        configMap:
          name: monitor-config
          items:
          - key: app.json
            path: app.json
      - name: monitor-config-persistent-storage
        hostPath:
          path: /var/lib/docker/ethmonitor
